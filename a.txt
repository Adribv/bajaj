import { useState, useEffect } from "react";

interface User {
  rollNumber: string;
  name: string;
}

interface FormField {
  fieldId: string;
  type:
    | "text"
    | "tel"
    | "email"
    | "textarea"
    | "date"
    | "dropdown"
    | "radio"
    | "checkbox";
  label: string;
  placeholder?: string;
  required: boolean;
  dataTestId: string;
  validation?: {
    message: string;
  };
  options?: Array<{
    value: string;
    label: string;
    dataTestId?: string;
  }>;
  maxLength?: number;
  minLength?: number;
}

interface FormSection {
  sectionId: number;
  title: string;
  description: string;
  fields: FormField[];
}

interface FormData {
  formTitle: string;
  formId: string;
  version: string;
  sections: FormSection[];
}

interface FormResponse {
  message: string;
  form: FormData;
}

export default function App() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [user, setUser] = useState<User>({ rollNumber: "", name: "" });
  const [formData, setFormData] = useState<FormData | null>(null);
  const [currentSection, setCurrentSection] = useState(0);
  const [formValues, setFormValues] = useState<Record<string, any>>({});
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isLoading, setIsLoading] = useState(false);
  const [loginError, setLoginError] = useState("");

  // Create user API call
  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);
    setLoginError("");

    try {
      const response = await fetch(
        "https://dynamic-form-generator-9rl7.onrender.com/create-user",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            rollNumber: user.rollNumber,
            name: user.name,
          }),
        }
      );

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "Failed to login");
      }

      setIsLoggedIn(true);
      fetchForm();
    } catch (error) {
      console.error("Login error:", error);
      setLoginError(error instanceof Error ? error.message : "Failed to login");
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch form structure API call
  const fetchForm = async () => {
    setIsLoading(true);
    try {
      const response = await fetch(
        `https://dynamic-form-generator-9rl7.onrender.com/get-form?rollNumber=${user.rollNumber}`
      );

      if (!response.ok) {
        throw new Error("Failed to fetch form data");
      }

      const data: FormResponse = await response.json();
      setFormData(data.form);

      // Initialize form values with empty strings
      const initialValues: Record<string, any> = {};
      data.form.sections.forEach((section) => {
        section.fields.forEach((field) => {
          if (field.type === "checkbox") {
            initialValues[field.fieldId] = false;
          } else {
            initialValues[field.fieldId] = "";
          }
        });
      });

      setFormValues(initialValues);
    } catch (error) {
      console.error("Error fetching form:", error);
    } finally {
      setIsLoading(false);
    }
  };

  // Handle form input changes
  const handleInputChange = (fieldId: string, value: any) => {
    setFormValues((prev) => ({
      ...prev,
      [fieldId]: value,
    }));

    // Clear error when user types
    if (errors[fieldId]) {
      setErrors((prev) => {
        const updated = { ...prev };
        delete updated[fieldId];
        return updated;
      });
    }
  };

  // Validate a single field
  const validateField = (field: FormField, value: any): string => {
    if (
      field.required &&
      (value === "" || value === undefined || value === null)
    ) {
      return field.validation?.message || "This field is required";
    }

    if (typeof value === "string") {
      if (field.minLength && value.length < field.minLength) {
        return `Minimum ${field.minLength} characters required`;
      }

      if (field.maxLength && value.length > field.maxLength) {
        return `Maximum ${field.maxLength} characters allowed`;
      }
    }

    if (field.type === "email" && value && !/\S+@\S+\.\S+/.test(value)) {
      return "Please enter a valid email address";
    }

    if (field.type === "tel" && value && !/^\d{10}$/.test(value)) {
      return "Please enter a valid 10-digit phone number";
    }

    return "";
  };

  // Validate current section
  const validateSection = (sectionIndex: number): boolean => {
    if (!formData) return false;

    const currentSectionData = formData.sections[sectionIndex];
    const newErrors: Record<string, string> = {};
    let isValid = true;

    currentSectionData.fields.forEach((field) => {
      const errorMessage = validateField(field, formValues[field.fieldId]);
      if (errorMessage) {
        newErrors[field.fieldId] = errorMessage;
        isValid = false;
      }
    });

    setErrors(newErrors);
    return isValid;
  };

  const handleNext = () => {
    const isValid = validateSection(currentSection);

    if (isValid && formData) {
      if (currentSection < formData.sections.length - 1) {
        setCurrentSection(currentSection + 1);
      }
    }
  };

  const handlePrev = () => {
    if (currentSection > 0) {
      setCurrentSection(currentSection - 1);
    }
  };

  // Handle form submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    const isValid = validateSection(currentSection);

    if (isValid) {
      console.log("Form Data Submitted:", formValues);
    }
  };

  // Render input field based on type
  const renderField = (field: FormField) => {
    switch (field.type) {
      case "text":
      case "email":
      case "tel":
      case "date":
        return (
          <input
            type={field.type}
            id={field.fieldId}
            data-testid={field.dataTestId}
            value={formValues[field.fieldId] || ""}
            onChange={(e) => handleInputChange(field.fieldId, e.target.value)}
            placeholder={field.placeholder}
            className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            maxLength={field.maxLength}
          />
        );
      case "textarea":
        return (
          <textarea
            id={field.fieldId}
            data-testid={field.dataTestId}
            value={formValues[field.fieldId] || ""}
            onChange={(e) => handleInputChange(field.fieldId, e.target.value)}
            placeholder={field.placeholder}
            className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
            maxLength={field.maxLength}
          />
        );
      case "dropdown":
        return (
          <select
            id={field.fieldId}
            data-testid={field.dataTestId}
            value={formValues[field.fieldId] || ""}
            onChange={(e) => handleInputChange(field.fieldId, e.target.value)}
            className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
          >
            <option value="">Select an option</option>
            {field.options?.map((option) => (
              <option
                key={option.value}
                value={option.value}
                data-testid={option.dataTestId}
              >
                {option.label}
              </option>
            ))}
          </select>
        );
      case "radio":
        return (
          <div className="space-y-2">
            {field.options?.map((option) => (
              <div key={option.value} className="flex items-center">
                <input
                  type="radio"
                  id={`${field.fieldId}-${option.value}`}
                  name={field.fieldId}
                  value={option.value}
                  data-testid={option.dataTestId}
                  checked={formValues[field.fieldId] === option.value}
                  onChange={() =>
                    handleInputChange(field.fieldId, option.value)
                  }
                  className="mr-2"
                />
                <label htmlFor={`${field.fieldId}-${option.value}`}>
                  {option.label}
                </label>
              </div>
            ))}
          </div>
        );
      case "checkbox":
        return (
          <div className="flex items-center">
            <input
              type="checkbox"
              id={field.fieldId}
              data-testid={field.dataTestId}
              checked={formValues[field.fieldId] || false}
              onChange={(e) =>
                handleInputChange(field.fieldId, e.target.checked)
              }
              className="mr-2"
            />
            <label htmlFor={field.fieldId}>{field.label}</label>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="min-h-screen bg-gray-100 dark:bg-gray-800">
      <div className="max-w-4xl mx-auto p-4">
        <h1 className="text-2xl font-semibold text-center text-gray-900 dark:text-white">
          Dynamic Form
        </h1>

        {isLoggedIn ? (
          <form onSubmit={handleSubmit}>
            <div>
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
                {formData?.formTitle}
              </h2>
              {formData?.sections
                ? formData.sections
                    .slice(currentSection, currentSection + 1)
                    .map((section) => (
                      <div key={section.sectionId} className="mt-4">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                          {section.title}
                        </h3>
                        <p className="text-gray-700 dark:text-gray-300">
                          {section.description}
                        </p>
                        <div className="space-y-4 mt-4">
                          {section.fields.map((field) => (
                            <div key={field.fieldId}>
                              <label
                                htmlFor={field.fieldId}
                                className="block text-gray-900 dark:text-white"
                              >
                                {field.label}
                              </label>
                              {renderField(field)}
                              {errors[field.fieldId] && (
                                <p className="text-red-600 text-sm">
                                  {errors[field.fieldId]}
                                </p>
                              )}
                            </div>
                          ))}
                        </div>
                      </div>
                    ))
                : null}
            </div>

            <div className="flex justify-between mt-4">
              <button
                type="button"
                onClick={handlePrev}
                className="px-4 py-2 bg-gray-300 dark:bg-gray-600 text-gray-800 dark:text-white rounded hover:bg-gray-400 dark:hover:bg-gray-500"
              >
                Previous
              </button>
              <div className="space-x-2">
                {currentSection < (formData?.sections.length || 0) - 1 ? (
                  <button
                    type="button"
                    onClick={handleNext}
                    className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                  >
                    Next
                  </button>
                ) : (
                  <button
                    type="submit"
                    className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600"
                  >
                    Submit
                  </button>
                )}
              </div>
            </div>
          </form>
        ) : (
          <form onSubmit={handleLogin}>
            <div>
              <label
                htmlFor="rollNumber"
                className="block text-gray-700 dark:text-white"
              >
                Roll Number
              </label>
              <input
                type="text"
                id="rollNumber"
                className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                value={user.rollNumber}
                onChange={(e) => setUser({ ...user, rollNumber: e.target.value })}
              />
            </div>
            <div className="mt-4">
              <label
                htmlFor="name"
                className="block text-gray-700 dark:text-white"
              >
                Name
              </label>
              <input
                type="text"
                id="name"
                className="w-full p-2 border rounded focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white"
                value={user.name}
                onChange={(e) => setUser({ ...user, name: e.target.value })}
              />
            </div>
            {loginError && (
              <p className="text-red-600 text-sm mt-2">{loginError}</p>
            )}
            <div className="mt-4 text-center">
              <button
                type="submit"
                disabled={isLoading}
                className="px-6 py-2 bg-blue-500 text-white rounded disabled:bg-blue-300"
              >
                {isLoading ? "Logging in..." : "Login"}
              </button>
            </div>
          </form>
        )}
      </div>
    </div>
  );
}


	
